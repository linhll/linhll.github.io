{"version":3,"sources":["layout/BottomTabs/index.tsx","layout/index.tsx","pages/Home/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledTabs","withStyles","root","indicator","backgroundColor","Tabs","StyledTab","color","selected","Tab","BottomTabs","React","useState","currentTab","setCurrentTab","variant","value","onChange","e","v","icon","Settings","Root","styled","div","Content","Layout","children","FloatActionButton","position","bottom","right","Fab","Home","aria-label","Add","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kPAIMA,EAAaC,YAAW,CAC5BC,KAAM,GACNC,UAAW,CACTC,gBAAiB,aAHFH,CAKhBI,KAEGC,EAAYL,YAAW,CAC3BC,KAAM,CACJK,MAAO,QAETC,SAAU,CACRD,MAAO,aALON,CAOfQ,KAYYC,EAVkB,WAAO,IAAD,EACDC,IAAMC,SAAiB,QADtB,mBAC9BC,EAD8B,KAClBC,EADkB,KAErC,OACE,eAACd,EAAD,CAAYe,QAAQ,YAAYC,MAAOH,EAAYI,SAAU,SAACC,EAAGC,GAAJ,OAAUL,EAAcK,IAArF,UACE,cAACb,EAAD,CAAWU,MAAM,OAAOI,KAAM,cAAC,IAAD,MAC9B,cAACd,EAAD,CAAWU,MAAM,UAAUI,KAAM,cAACC,EAAA,EAAD,UCrBjCC,EAAOC,IAAOC,IAAV,oKAWJC,EAAUF,IAAOC,IAAV,6EAcEE,EATc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9B,OACE,eAACL,EAAD,WACE,cAACG,EAAD,UAAUE,IACV,cAAC,EAAD,Q,gBCnBAL,EAAOC,IAAOC,IAAV,oFAMJI,EAAoB3B,YAAW,CACnCC,KAAM,CACJ2B,SAAU,WACVC,OAAQ,EACRC,MAAO,IAJe9B,CAMvB+B,KAYYC,EAVQ,SAAC,GAAiB,EAAfN,SACxB,OACE,cAAC,EAAD,UACE,cAACC,EAAD,CAAmBrB,MAAM,YAAY2B,aAAW,MAAhD,SACE,cAACC,EAAA,EAAD,SCnBO,SAASC,IACtB,OACE,cAAC,EAAD,UACE,cAAC,EAAD,M,UCKAC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MClGjEC,IAASC,OAAO,cAAC5B,EAAD,IAAS6B,SAASC,eAAe,SDqB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIqB,IACpBC,GACA7B,OAAOC,SAAS6B,MAEJC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,GAAN,sBAEP/B,IAgEV,SAAiCO,EAAeC,GAE9C2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OClD/BE,K","file":"static/js/main.d4cc5001.chunk.js","sourcesContent":["import { Tab, Tabs, withStyles } from '@material-ui/core';\nimport { Home, Settings } from '@material-ui/icons';\nimport React from 'react';\n\nconst StyledTabs = withStyles({\n  root: {},\n  indicator: {\n    backgroundColor: 'seagreen',\n  },\n})(Tabs);\n\nconst StyledTab = withStyles({\n  root: {\n    color: 'gray',\n  },\n  selected: {\n    color: 'seagreen',\n  },\n})(Tab);\n\nconst BottomTabs: React.FC<{}> = () => {\n  const [currentTab, setCurrentTab] = React.useState<string>('home');\n  return (\n    <StyledTabs variant=\"fullWidth\" value={currentTab} onChange={(e, v) => setCurrentTab(v)}>\n      <StyledTab value=\"home\" icon={<Home />} />\n      <StyledTab value=\"setting\" icon={<Settings />} />\n    </StyledTabs>\n  );\n};\n\nexport default BottomTabs;\n","import React from 'react';\nimport styled from 'styled-components';\nimport BottomTabs from './BottomTabs';\n\nconst Root = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Content = styled.div`\n  flex: 1;\n  border-bottom: 1px solid #e6e6e6;\n`;\n\nconst Layout: React.FC<{}> = ({ children }) => {\n  return (\n    <Root>\n      <Content>{children}</Content>\n      <BottomTabs />\n    </Root>\n  );\n};\n\nexport default Layout;\n","import { Fab, withStyles } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n`;\n\nconst FloatActionButton = withStyles({\n  root: {\n    position: 'absolute',\n    bottom: 8,\n    right: 8,\n  },\n})(Fab);\n\nconst Home: React.FC = ({ children }) => {\n  return (\n    <Root>\n      <FloatActionButton color=\"secondary\" aria-label=\"add\">\n        <Add />\n      </FloatActionButton>\n    </Root>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport Layout from './layout';\nimport Home from './pages/Home';\n\nexport default function App() {\n  return (\n    <Layout>\n      <Home />\n    </Layout>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}